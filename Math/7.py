#python中需要对正负区分，因为取整是向下取整，对于负数来说-123取整数即-12.3向下取整，为-13，如果取余数
#-123%10取余数如下：r=a-n*[a//n] ，-123%10 = -123 - 10 * (-123 // 10) = -123 - 10 * (-13) = 7
#所以我们直接取绝对值，省去麻烦
#第二点是判断溢出，为什么是214748364，
#x的界限为-2147483648～2147483647
#首先x输入的值一定在这个范围内，我们考虑如果最终反转的合法没有溢出，为什么判断大于214748364？，
#因为x输入最大值是2147483647，但是肯定溢出
#我们先看反转后res的最大值可能是2147483641 因为如果个位数大于2，明显x就不合法
#res如果是2147483641，则x是1463847412，合法
#所以在转换过程中res一定不能大于214748364（这里一开始就判断，因为接下来还会继续加位数，它加的话也只能加1
#如果大于214748364，就算x合法，res会不合法（因为res要加位数，一定大于界限值）
#其实还可以根据res = y * 10 + x % 10做判断，因为这一步溢出的话，(res-y*10) % 10肯定不等于x
#溢出不能直接比较res和2147483647，因为已经溢出了，res已经不合法了，判断也是错的
#另外python溢出会自动帮你转换，实际上不用这么麻烦，但是我这里假定它必须是32位数
class Solution:
    def reverse(self, x: int) -> int:
        res = 0
        signal = 1 if x > 0 else -1
        x = abs(x)
        while x != 0:
            if res > 214748364: return 0
            res = res * 10 + x % 10
            x //= 10
        return signal * res
